作用域和闭包
一、执行上下文
范围：一段<script>或者一个函数
全局：变量定义、函数声明
函数：变量定义、函数声明、this、arguments
	注意函数声明和函数表达式的区别

函数声明： function fn () {} //fn() 会提前
函数表达式： var fn1 = function () {} //fn1 会提前 ，但不是函数

console.log(a); //undefined
var a = 100;

fn('zhangsan');	//'zhangsan' 20
function fn (name) {
	age = 20;
	console.log(name, age);
	var age;
}


二、this
this 要在执行时才能确认值，定义时无法确认

var a = {
	name: 'A',
	fn: function () {
		console.log(this.name);
	}
}
a.fn(); //this === a
a.fn.call({name: 'B'}); //this === {name: 'B'}
var fn1 = a.fn;
fn1()   //this === window

（1）作为构造函数执行
（2）作为对象属性执行
（3）作为普通函数执行
（4）call apply bind


三、作用域
JS没有块级作用域
if (true) {
	var name = 'zhangsan';
}
console.log(name);  //undefined

只有函数和全局作用域
var a = 100;
function fn() {
	var a = 200;
	console.log('fn',a);
}
console.log('global', a);
fn();

四、作用域链
var a = 100;
function F1() {
	var b = 200;

	//当前作用域没有定义的变量，即'自由变量'
	//函数作用域中没有的变量，去父级作用域找

	function F2（） {
		var c = 300;
		console.log(a);	 // a是自由变量
		console.log(b);	 // b是自由变量
		console.log(c);
	}
	F2();
}
F1();

---------ES6补充块级作用域-----------
for (let j = 0; j < 10; j++) {} //ES6要求let声明
console.log(j);


五、闭包
① 函数作为返回值
	function F1() {
		var a = 100;

		// 返回一个函数（函数作用为返回值）
		return function () {
			console.log(a); //a 自由变量，向在函数定义时的父作用域寻找，
		}
	}
	//f1得到一个函数
 	var f1 = F1();
	var a == 200;
	f1();

② 函数作为参数传递
	function F1() {
		var a = 100;
		return function () {
			console.log(a); 
		}
	}
 	var f1 = F1();
	function F2(fn) {
		var a = 300;
		fn();
	}	
	F2(f1);