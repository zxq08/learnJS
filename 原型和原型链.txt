一、构造函数

function Foo(name, age){	//构造函数名用大写字母开头
	this.name = name;
	this.age = age;
	this.class = 'class-1';
	//return this;  //默认有这一行
}
var f = new Foo('zhangsan', 20);
var f = new Foo('lisi', 21);

构造函数 - 扩展
var a = {};  // var a = new Object() 的语法糖
var a = [];  // var a = new Array() 的语法糖
function Foo(){};  // var Foo = new Function(...) 的语法糖
使用 instanceof 判断一个函数是否是一个变量的构造函数


二、原型规则和示例
原型规则是学习原型链的基础
5条原型规则
（1）所有引用类型（数组、对象、函数）都具有对象特性，即可自由扩展属性（null除外）
	var obj = {}; obj.a = 100;
	var arr = []; arr.a = 100;
	function fn (){ fn.a = 100;	}
（2）所有引用类型都具有 __proto__ (隐式原型)属性，属性值是一个普通对象
	console.log(obj.__proto__);
	console.log(arr.__proto__);
	console.log(fn.__proto__);
（3）所有函数，都有一个 prototype (显示原型)属性，属性值是一个普通对象
	console.log(fn.prototype);
（4）所有引用类型的 __proto__ 属性都指向它的构造函数的 prototype 属性值
	console.log(obj.__proto__ === Object.prototype);
（5）当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会其他它的 __proto__
即它的构造函数的 prototype 中寻找

示例一：
//构造函数
function Foo(name, age){
	this.name = name; 
}
Foo.prototype.alertName = function(){
	alert(this.name);
}
//创建示例
var f = new Foo('zhangsan');
f.printName = function(){
	console.log(this.name);
}
//测试
f.printName();
f.alertName();
	
示例二：
var item; //遍历，筛除原型上的属性
if (item in if){
	//高级浏览器已经在 for in 中屏蔽了来自原型的属性
	//但是这里建议大家还是加上这个判断，保证程序的健壮性
	if(f.hasOwnProperty(item)){
		console.log(item);
	}
} 



三、原型链
f.toString() //要去 f.__proto__.__proto__ 中查找

f  ——————> 	Foo.prototype  ——————>  Object.prototype  ——————>  null
  __proto__	              __proto__				 __proto__		



四、instanceof
用于判断 引用类型 属于哪个 构造函数的方法
f instanceof Foo 的判断逻辑：
① f 的 __proto__ 一层一层往上，能否对应到 Foo.prototype
② 在试着判断 f instanceof Object
