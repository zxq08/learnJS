原始表达式：常量（3.14）、直接量（"test"）、
		关键字（null\this\true）、变量（i\k\j）

原始表达式 运算符 原始表达式 = 复合表达式
数组、对象的初始化表达式 [1,2]\{x:1,y:2}
函数表达式 var fe = function(){};
属性访问表达式 var o = {x:1};  o.x 或 o['x']
调用表达式	func();
对象创建表达式 new Object;

运算符：一元（+）  二元（a+b） 三元（c?a:b）
赋值 比较 算术 位 逻辑 字符串 
特殊(delete)

var val = true?1:2; //val=1

var val = (1,2,3);  //val=3  从左到右依次计算，取最右边的结果

var obj = {x:1};	//delete运算符
obj.x; //1			
delete obj.x; 
obj.x; //undefined

var obj={};         //从IE9开始，可以用configurable禁用delete
Object.defineProperty(obj,'x',{
	configurable : false,
	value : 1
});
delete obj.x; //false
obj.x; //1

window.x = 1;	//in运算符
'x' in window; //true

instanceof   typeof 运算符

new运算符
function Foo(){}
Foo.prototype.x = 1;
var obj = new Foo();
obj.x; //1
obj.hasOwnProperty('x');//false
obj._proto_.hasOwnProperty('x'); //true

this运算符
this; //window（浏览器）
var obj = {
	func : function(){return this;}
};
obj.func(); //obj

void运算符
void 0 //undefined
void(0)//undefined

运算符优先级

