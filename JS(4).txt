 JavaScript对象
 无序，字符串key和对应的value
 var obj={};
 obj.y=2;
 obj.x=1;
 
 function foo(){}
 foo.prototype.z =3;
 var obj =new foo();
 
 //obj.x=1 //obj.z=3
 
 创建对象
 （1）var obj1 = {x:1,y:2};
 （2）function foo(){}
	  foo.prototype.z =3;
	  var obj = new foo();
	  obj.y =2;
	  obj.x =1;
	  
obj => foo.prototype => Object.prototype => null
	    
	  obj.x;//1
	  obj.y;//2
	  obj.z;//3
	  typeof obj.toString; //function
	  'z' in obj; //true
	  obj.hasOwnProperty('z');//false
	  
	  obj.z =5;
	  obj.hasOwnProperty('z');//true
	  foo.prototype.z; //3
	  obj.z; //5
	  
	  obj.z =undefined;
	  obj.z;//undefined
	  
	  delete obj.z;//true
	  obj.z; //3  = foo.prototype.z;
	 
 （3）Object.create
	  var obj = Object.create({x:1});
	  obj.x; //1	 
	  typeof obj.toString //function
	  obj.hasOwnProperty('x');//false
	  
	  var obj = Object.create(null);
	  obj.toString //undefined

 属性操作
  读写对象属性
	var obj = {x:1,y:2};
	obj.x;//1
	obj["y"];//2
	
	var obj ={x1:1,x2:2};
	var i=1,n=2
	for(;i<=n;i++){
		console.log(obj['x'+i]);
	}
	var p;
	for(p in obj){
		console.log(obj[b]);
	}
	
  读写-异常
	读不到为undefined,不能写入，报错
	var yz;
	if(obj.y){ yz = obj.y.z; }
	var yz = obj && obj.y && obj.y.z;
	
  删除
	delete person.age;
	Object.prototype不可以被delete，返回false
	var descriptor = Object.getOwnPropertyDescriptor(Object,'prototype');
	descriptor.configurable; //false
	
	不可以delete var声明的变量、function fd(){}创建的函数
	但可以delete隐式声明的全局变量， dVal=1; delete dVal;//true
	
  属性检测
	属性 in Object
	hasOwnProperty  //该对象是否包含，不算入原型链上的属性
	propertyIsEnumerable //可枚举的属性
	
	1)在使用Object.defineProperty、Object.defineProperties 
	  或 Object.create 函数的情况下添加数据属性，
	  writable、enumerable和configurable默认值为false。
    2)使用对象直接量创建的属性，writable、enumerable
	  和configurable特性默认为true。
	
	可枚举指，可被遍历的属性
	
  get/set方法
    另一种读写属性的方法
	var man = {
		name : 'Bosn',
		weibo : '@Bosn',
		get age(){
			return new Date.getFullYear() - 1988;
		},
		set age(val){
			console.log('Age can\'t ne set to' + val);
		}
	}
	复杂例子：
	var man = {
		weibo : '@Bosn',
		$age : null,
		get age(){
			if(this.$age == undefined){
				return new Date().getFullYear() - 1988;
			}else{
				return this.$age;
			}
		},
		set age(val){
			val = +val; //使用一元运算符把val转换成数字类型
			if(!isNaN(val) && val>0 && val<150){
				this.$age = +val;
			}else{
				throw new Error('Incorrect val = '+val);
			}
		}
	}
	console.log(man.age);//27
	man.age = 100;
	console.log(man.age);//100
	man.age = 'abc'; //error
	
  get/set和原型链
    function foo(){}
	Object.defineProperty(foo.prototype,'z',
	  {get : function(){return 1;}});
	var obj = new foo();
	此时foo上有z的set或get方法，
	obj不能再通过obj.z去赋值添加自己的z
    需要使用Object.defineProperty添加	
	
  属性标签
    属性及的权限设置
	  Object.getOwnPropertyDescriptor({pro:true},'pro');
	  Object.keys({});//返回所有可枚举的属性
	  Ob.defineProperties(person,{属性1:{},属性2:{},...});定义多个属性
      	
 对象标签
   原型标签 _proto_
   class标签 Object.prototype.toString;
   extensible标签 
   isextensible 是否可扩展
   preventExtensible 禁止可扩展
   Object.seal(obj)修改所有属性的configurable为false
   Object.freeze() 冻结
   Object.isFrozen() 是否被冻结
   
 序列化、其他对象方法
   序列化：JSON.stringfy(obj); 
   会干掉值为undefined的属性，
   并且会把NaN和Infinity转换为null
   JSON.parse('{"x":1}'); JSON转成JS对象
   eg:
   var obj = {
		x:1,
		y:2,
		o:{
			o1:1,
			o2:2,
			toJSON:function(){
				return this.o1 + this.o2;
			}
		}
   };
	JSON.stringfy(obj); //{"x":1,"y":2,"o":3}
	
   toString()
   valueOf()
   
	